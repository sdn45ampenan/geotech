<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Survei Minat Belajar - Game Ikan Berenang</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Comic Sans MS', cursive, sans-serif;
            background: linear-gradient(180deg, #87CEEB 0%, #4682B4 50%, #191970 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            min-height: 100vh;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.2rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }

        .game-area {
            position: relative;
            height: 500px;
            background: linear-gradient(180deg, rgba(135,206,235,0.3) 0%, rgba(70,130,180,0.5) 100%);
            border-radius: 20px;
            overflow: hidden;
            border: 3px solid #4682B4;
            margin-bottom: 30px;
        }

        .player-fish {
            position: absolute;
            width: 80px;
            height: 60px;
            left: 50px;
            transition: top 0.2s ease;
            z-index: 20;
            filter: drop-shadow(3px 3px 6px rgba(0,0,0,0.4));
        }

        .food-fish {
            position: absolute;
            width: 40px;
            height: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            animation: swimLeft 4s linear infinite;
        }

        .food-fish:hover {
            transform: scale(1.1);
        }

        .food-fish svg {
            width: 100%;
            height: 100%;
            filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));
        }

        .trash-item {
            position: absolute;
            width: 50px;
            height: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            z-index: 10;
            animation: swimLeft 5s linear infinite;
        }

        .trash-item:hover {
            transform: scale(1.1);
        }

        @keyframes swimLeft {
            0% {
                left: 100%;
            }
            100% {
                left: -100px;
            }
        }

        .bubbles {
            position: absolute;
            width: 10px;
            height: 10px;
            background: rgba(255,255,255,0.6);
            border-radius: 50%;
            animation: bubble 3s infinite linear;
        }

        @keyframes bubble {
            0% {
                transform: translateY(500px);
                opacity: 0;
            }
            10% {
                opacity: 1;
            }
            90% {
                opacity: 1;
            }
            100% {
                transform: translateY(-50px);
                opacity: 0;
            }
        }



        .seaweed {
            position: absolute;
            bottom: 0;
            width: 30px;
            height: 150px;
            background: linear-gradient(180deg, #228B22, #006400);
            border-radius: 15px 15px 0 0;
            animation: sway 3s ease-in-out infinite;
        }

        @keyframes sway {
            0%, 100% { transform: rotate(-5deg); }
            50% { transform: rotate(5deg); }
        }

        @keyframes fadeUp {
            0% {
                opacity: 1;
                transform: translateY(0);
            }
            100% {
                opacity: 0;
                transform: translateY(-50px);
            }
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
        }

        .modal-content {
            background-color: #fff;
            margin: 5% auto;
            padding: 30px;
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            right: 20px;
            top: 15px;
        }

        .close:hover {
            color: #000;
        }

        .question {
            margin-bottom: 20px;
        }

        .question h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .options {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .option {
            padding: 12px 20px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .option:hover {
            background: #e3f2fd;
            border-color: #2196f3;
        }

        .option.selected {
            background: #2196f3;
            color: white;
            border-color: #1976d2;
        }

        .btn {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1.1rem;
            font-weight: bold;
            transition: all 0.3s ease;
            margin: 10px 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .btn-primary {
            background: linear-gradient(45deg, #4CAF50, #45a049);
        }

        .btn-secondary {
            background: linear-gradient(45deg, #2196F3, #1976D2);
        }

        .progress {
            width: 100%;
            height: 20px;
            background: #e0e0e0;
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            transition: width 0.3s ease;
            border-radius: 10px;
        }

        .name-input {
            text-align: center;
            margin-bottom: 30px;
        }

        .name-input input {
            padding: 15px 25px;
            font-size: 1.2rem;
            border: 3px solid #4CAF50;
            border-radius: 25px;
            width: 300px;
            max-width: 90%;
            text-align: center;
            outline: none;
        }

        .name-input input:focus {
            border-color: #45a049;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
        }

        .stat-card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .chart {
            width: 100%;
            height: 200px;
            margin: 10px 0;
        }

        .admin-panel {
            background: white;
            border-radius: 20px;
            padding: 30px;
            margin-top: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .data-table th {
            background: #f8f9fa;
            font-weight: bold;
        }

        .hidden {
            display: none;
        }

        .success-message {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
            border: 1px solid #c3e6cb;
        }

        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
            border: 1px solid #f5c6cb;
        }

        .mobile-controls {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 100;
            flex-direction: column;
            gap: 10px;
        }

        .control-btn {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .control-btn:active {
            transform: scale(0.95);
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }

        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .header h1 {
                font-size: 1.8rem;
                margin-bottom: 8px;
            }
            
            .header p {
                font-size: 1rem;
            }
            
            .game-area {
                height: 350px;
                margin-bottom: 20px;
            }
            
            .player-fish {
                width: 60px;
                height: 45px;
            }
            
            .food-fish {
                width: 35px;
                height: 25px;
            }
            
            .name-input input {
                width: 280px;
                font-size: 1.1rem;
                padding: 12px 20px;
            }

            .btn {
                padding: 12px 25px;
                font-size: 1rem;
                margin: 8px 3px;
            }

            .mobile-controls {
                display: flex;
            }

            .modal-content {
                margin: 10% auto;
                padding: 20px;
                width: 95%;
                max-height: 85vh;
            }

            .question h3 {
                font-size: 1.1rem;
            }

            .option {
                padding: 15px;
                font-size: 1rem;
                text-align: center;
            }

            .stats {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .data-table {
                font-size: 0.9rem;
            }

            .data-table th,
            .data-table td {
                padding: 8px 6px;
            }

            /* Hide desktop instructions on mobile */
            .desktop-instructions {
                display: none;
            }

            /* Show mobile instructions */
            .mobile-instructions {
                display: block;
                color: #FFD700;
                text-align: center;
                margin-bottom: 15px;
                font-size: 1rem;
                background: rgba(0,0,0,0.3);
                padding: 10px;
                border-radius: 10px;
            }
        }

        @media (min-width: 769px) {
            .mobile-instructions {
                display: none;
            }
            
            .desktop-instructions {
                display: block;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🐠 Survei Minat Belajar 🐠</h1>
            <p>Tangkap ikan untuk menjawab pertanyaan tentang minat belajarmu!</p>
        </div>

        <div id="nameSection" class="name-input">
            <h2 style="color: white; margin-bottom: 20px;">Masukkan Nama Kamu</h2>
            <input type="text" id="studentName" placeholder="Nama lengkap..." maxlength="50">
            <br><br>
            <button class="btn btn-primary" onclick="startGame()">Mulai Bermain</button>
            <br>
            <button class="btn btn-secondary" onclick="showAdminPanel()" style="margin-top: 15px;">Menu Admin</button>
        </div>

        <div id="gameSection" class="hidden">
            <div class="progress">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <p style="color: white; text-align: center; margin-bottom: 10px;">
                Pertanyaan <span id="currentQuestion">0</span> dari <span id="totalQuestions">10</span>
            </p>
            <p class="desktop-instructions" style="color: #FFD700; text-align: center; margin-bottom: 20px; font-size: 1.1rem;">
                🎮 Gunakan panah ↑↓ atau W/S untuk menggerakkan ikan, dekati ikan kecil untuk memakannya!
            </p>
            <p class="mobile-instructions">
                📱 Gunakan tombol ↑↓ di kanan bawah untuk menggerakkan ikan, sentuh ikan kecil untuk memakannya!
            </p>
            
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; color: white;">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <span style="font-size: 1.1rem; font-weight: bold;">❤️ Nyawa:</span>
                    <div id="livesDisplay" style="display: flex; gap: 5px;">
                        <span style="font-size: 1.5rem;">❤️</span>
                        <span style="font-size: 1.5rem;">❤️</span>
                        <span style="font-size: 1.5rem;">❤️</span>
                    </div>
                </div>
                <div style="background: rgba(255,255,255,0.2); padding: 8px 15px; border-radius: 20px; font-size: 0.9rem;">
                    <span style="color: #FFD700;">⭐</span> Hindari sampah laut!
                </div>
            </div>
            
            <div class="game-area" id="gameArea">
                <!-- Seaweed decoration -->
                <div class="seaweed" style="left: 10%;"></div>
                <div class="seaweed" style="left: 30%; height: 120px;"></div>
                <div class="seaweed" style="left: 60%; height: 180px;"></div>
                <div class="seaweed" style="left: 85%; height: 140px;"></div>
            </div>

            <!-- Mobile Controls -->
            <div class="mobile-controls" id="mobileControls">
                <button class="control-btn" id="upBtn" ontouchstart="moveFishUp()" ontouchend="stopMoving()">↑</button>
                <button class="control-btn" id="downBtn" ontouchstart="moveFishDown()" ontouchend="stopMoving()">↓</button>
            </div>


        </div>

        <div id="completionSection" class="hidden">
            <div style="text-align: center; color: white;">
                <h2>🎉 Selamat! Kamu telah menyelesaikan survei! 🎉</h2>
                <p style="margin: 20px 0;">Terima kasih atas partisipasimu dalam survei minat belajar.</p>
                <button class="btn btn-primary" onclick="saveData()">Simpan Data</button>
                <button class="btn btn-secondary" onclick="restartGame()">Main Lagi</button>
                <button class="btn" onclick="showAdminPanel()">Menu Admin</button>
            </div>
        </div>
    </div>

    <!-- Modal for questions -->
    <div id="questionModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="questionContent"></div>
            <div style="text-align: center; margin-top: 20px;">
                <button class="btn btn-primary" onclick="submitAnswer()">Jawab</button>
            </div>
        </div>
    </div>

    <!-- Admin Panel Modal -->
    <div id="adminModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAdminModal()">&times;</span>
            <h2>Menu Admin</h2>
            <div style="margin: 20px 0;">
                <input type="password" id="adminCode" placeholder="Masukkan kode admin..." style="padding: 10px; border-radius: 5px; border: 1px solid #ddd; width: 200px;">
                <button class="btn btn-primary" onclick="checkAdminCode()">Buka Data</button>
            </div>
            <div id="adminContent" class="hidden">
                <h3>Data Survei Minat Belajar</h3>
                <div id="dataVisualization"></div>
                <div id="individualData"></div>
            </div>
        </div>
    </div>

    <script>
        // Game variables
        let currentQuestionIndex = 0;
        let studentName = '';
        let answers = {};
        let gameData = [];
        let playerFishY = 250;
        let gameActive = false;
        let moveInterval = null;
        let playerLives = 3;
        let gameSpeed = 1;
        
        // Questions for the survey
        const questions = [
            {
                id: 1,
                question: "Mata pelajaran apa yang paling kamu sukai?",
                options: [
                    "Matematika",
                    "Bahasa Indonesia", 
                    "IPA/Sains",
                    "IPS/Sosial",
                    "Bahasa Inggris",
                    "Seni dan Budaya",
                    "Olahraga",
                    "Lainnya"
                ]
            },
            {
                id: 2,
                question: "Bagaimana cara belajar yang paling kamu sukai?",
                options: [
                    "Mendengarkan penjelasan guru",
                    "Membaca buku dan materi",
                    "Diskusi kelompok",
                    "Praktik langsung/eksperimen",
                    "Menonton video pembelajaran",
                    "Bermain game edukatif",
                    "Presentasi di depan kelas"
                ]
            },
            {
                id: 3,
                question: "Kapan waktu belajar yang paling efektif untukmu?",
                options: [
                    "Pagi hari (06.00-09.00)",
                    "Siang hari (09.00-12.00)", 
                    "Sore hari (12.00-15.00)",
                    "Malam hari (15.00-18.00)",
                    "Malam hari (18.00-21.00)",
                    "Tidak ada waktu khusus"
                ]
            },
            {
                id: 4,
                question: "Apa yang membuatmu semangat belajar?",
                options: [
                    "Mendapat nilai bagus",
                    "Pujian dari guru/orang tua",
                    "Materi yang menarik",
                    "Metode mengajar yang seru",
                    "Belajar dengan teman",
                    "Hadiah atau reward",
                    "Cita-cita masa depan"
                ]
            },
            {
                id: 5,
                question: "Kesulitan apa yang sering kamu hadapi saat belajar?",
                options: [
                    "Materi terlalu sulit",
                    "Cara mengajar membosankan",
                    "Tidak ada motivasi",
                    "Gangguan dari lingkungan",
                    "Kurang waktu belajar",
                    "Tidak paham penjelasan guru",
                    "Tidak ada kesulitan"
                ]
            },
            {
                id: 6,
                question: "Media pembelajaran apa yang kamu inginkan?",
                options: [
                    "Video animasi",
                    "Game interaktif",
                    "Aplikasi mobile",
                    "Virtual Reality (VR)",
                    "Buku digital",
                    "Podcast/audio",
                    "Media sosial edukatif"
                ]
            },
            {
                id: 7,
                question: "Bagaimana kamu ingin dinilai dalam pembelajaran?",
                options: [
                    "Ujian tertulis",
                    "Presentasi/praktik",
                    "Proyek kelompok",
                    "Portofolio karya",
                    "Kuis online",
                    "Penilaian harian",
                    "Kombinasi berbagai cara"
                ]
            },
            {
                id: 8,
                question: "Lingkungan belajar seperti apa yang kamu sukai?",
                options: [
                    "Kelas tradisional",
                    "Ruang terbuka/outdoor",
                    "Laboratorium",
                    "Perpustakaan",
                    "Ruang multimedia",
                    "Belajar di rumah",
                    "Tempat yang tenang"
                ]
            },
            {
                id: 9,
                question: "Seberapa sering kamu ingin ada kegiatan praktik?",
                options: [
                    "Setiap hari",
                    "2-3 kali seminggu",
                    "Seminggu sekali",
                    "2 minggu sekali",
                    "Sebulan sekali",
                    "Jarang saja",
                    "Tidak perlu praktik"
                ]
            },
            {
                id: 10,
                question: "Apa harapanmu untuk pembelajaran di sekolah?",
                options: [
                    "Lebih menyenangkan dan interaktif",
                    "Lebih banyak praktik",
                    "Materi lebih mudah dipahami",
                    "Guru lebih sabar dan ramah",
                    "Fasilitas lebih lengkap",
                    "Lebih banyak diskusi",
                    "Sesuai minat dan bakat"
                ]
            }
        ];

        function startGame() {
            const name = document.getElementById('studentName').value.trim();
            if (!name) {
                alert('Silakan masukkan nama terlebih dahulu!');
                return;
            }
            
            studentName = name;
            playerLives = 3;
            gameSpeed = 1;
            document.getElementById('nameSection').classList.add('hidden');
            document.getElementById('gameSection').classList.remove('hidden');
            document.getElementById('totalQuestions').textContent = questions.length;
            
            gameActive = true;
            createPlayerFish();
            createFoodFish();
            createTrashItem();
            createBubbles();
            updateProgress();
            updateLivesDisplay();
            setupKeyboardControls();
            
            // Start collision detection
            setInterval(checkCollisions, 50); // Check collisions every 50ms
        }

        function createPlayerFish() {
            const gameArea = document.getElementById('gameArea');
            
            // Clear existing player fish
            const existingPlayer = gameArea.querySelector('.player-fish');
            if (existingPlayer) existingPlayer.remove();
            
            // Create player fish
            const playerFish = document.createElement('div');
            playerFish.className = 'player-fish';
            playerFish.id = 'playerFish';
            
            // Set initial position
            playerFishY = gameArea.offsetHeight / 2;
            playerFish.style.top = playerFishY + 'px';
            
            // Use the provided fish image
            playerFish.innerHTML = `<img src="https://iili.io/Fi9dKJ4.png" style="width: 100%; height: 100%; object-fit: contain;" alt="Player Fish">`;
            
            gameArea.appendChild(playerFish);
        }

        function createFoodFish() {
            if (!gameActive || currentQuestionIndex >= questions.length) return;
            
            const gameArea = document.getElementById('gameArea');
            
            // Create food fish
            const foodFish = document.createElement('div');
            foodFish.className = 'food-fish';
            foodFish.onclick = () => eatFish(foodFish);
            
            // Random position
            const randomY = Math.random() * (gameArea.offsetHeight - 100) + 50;
            foodFish.style.top = randomY + 'px';
            foodFish.style.left = '100%';
            
            // Random color circle food
            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'];
            const randomColor = colors[Math.floor(Math.random() * colors.length)];
            
            // Simple circle food
            foodFish.style.width = '30px';
            foodFish.style.height = '30px';
            foodFish.style.borderRadius = '50%';
            foodFish.style.backgroundColor = randomColor;
            foodFish.style.border = '3px solid white';
            foodFish.style.boxShadow = '0 2px 8px rgba(0,0,0,0.3)';
            foodFish.innerHTML = '🐟';
            foodFish.style.display = 'flex';
            foodFish.style.alignItems = 'center';
            foodFish.style.justifyContent = 'center';
            foodFish.style.fontSize = '16px';
            
            gameArea.appendChild(foodFish);
            
            // Remove fish after animation completes
            setTimeout(() => {
                if (foodFish.parentNode) {
                    foodFish.parentNode.removeChild(foodFish);
                }
                // Create next food fish
                setTimeout(() => createFoodFish(), 1000 + Math.random() * 2000);
            }, 4000);
        }

        function createTrashItem() {
            if (!gameActive) return;
            
            const gameArea = document.getElementById('gameArea');
            
            // Create trash item
            const trashItem = document.createElement('div');
            trashItem.className = 'trash-item';
            trashItem.onclick = () => hitTrash(trashItem);
            
            // Random position
            const randomY = Math.random() * (gameArea.offsetHeight - 100) + 50;
            trashItem.style.top = randomY + 'px';
            trashItem.style.left = '100%';
            
            // Random trash types
            const trashTypes = [
                { emoji: '🗑️', color: '#8B4513' },
                { emoji: '🥤', color: '#FF4444' },
                { emoji: '🍾', color: '#228B22' },
                { emoji: '⚡', color: '#FFD700' }, // electric/dangerous
                { emoji: '🔋', color: '#333333' },
                { emoji: '💀', color: '#800080' } // poison
            ];
            const randomTrash = trashTypes[Math.floor(Math.random() * trashTypes.length)];
            
            trashItem.style.backgroundColor = randomTrash.color;
            trashItem.style.border = '3px solid #444';
            trashItem.style.borderRadius = '10px';
            trashItem.style.boxShadow = '0 2px 8px rgba(0,0,0,0.5)';
            trashItem.innerHTML = randomTrash.emoji;
            trashItem.style.display = 'flex';
            trashItem.style.alignItems = 'center';
            trashItem.style.justifyContent = 'center';
            trashItem.style.fontSize = '24px';
            
            gameArea.appendChild(trashItem);
            
            // Remove trash after animation completes
            setTimeout(() => {
                if (trashItem.parentNode) {
                    trashItem.parentNode.removeChild(trashItem);
                }
                // Create next trash item (less frequent than food)
                setTimeout(() => createTrashItem(), 2000 + Math.random() * 4000);
            }, 5000);
        }

        function setupKeyboardControls() {
            document.addEventListener('keydown', function(event) {
                if (!gameActive) return;
                
                const playerFish = document.getElementById('playerFish');
                if (!playerFish) return;
                
                const gameArea = document.getElementById('gameArea');
                const step = 30;
                
                if (event.key === 'ArrowUp' || event.key === 'w' || event.key === 'W') {
                    event.preventDefault();
                    playerFishY = Math.max(20, playerFishY - step);
                    playerFish.style.top = playerFishY + 'px';
                } else if (event.key === 'ArrowDown' || event.key === 's' || event.key === 'S') {
                    event.preventDefault();
                    playerFishY = Math.min(gameArea.offsetHeight - 80, playerFishY + step);
                    playerFish.style.top = playerFishY + 'px';
                }
            });
        }

        // Mobile control functions
        function moveFishUp() {
            if (!gameActive) return;
            
            moveInterval = setInterval(() => {
                const playerFish = document.getElementById('playerFish');
                if (!playerFish) return;
                
                const gameArea = document.getElementById('gameArea');
                const step = 5; // Smaller steps for smoother mobile movement
                
                playerFishY = Math.max(20, playerFishY - step);
                playerFish.style.top = playerFishY + 'px';
            }, 50);
        }

        function moveFishDown() {
            if (!gameActive) return;
            
            moveInterval = setInterval(() => {
                const playerFish = document.getElementById('playerFish');
                if (!playerFish) return;
                
                const gameArea = document.getElementById('gameArea');
                const step = 5; // Smaller steps for smoother mobile movement
                
                playerFishY = Math.min(gameArea.offsetHeight - 80, playerFishY + step);
                playerFish.style.top = playerFishY + 'px';
            }, 50);
        }

        function stopMoving() {
            if (moveInterval) {
                clearInterval(moveInterval);
                moveInterval = null;
            }
        }

        // Add click/tap support for mobile controls
        document.addEventListener('DOMContentLoaded', function() {
            const upBtn = document.getElementById('upBtn');
            const downBtn = document.getElementById('downBtn');
            
            if (upBtn) {
                upBtn.addEventListener('mousedown', moveFishUp);
                upBtn.addEventListener('mouseup', stopMoving);
                upBtn.addEventListener('mouseleave', stopMoving);
            }
            
            if (downBtn) {
                downBtn.addEventListener('mousedown', moveFishDown);
                downBtn.addEventListener('mouseup', stopMoving);
                downBtn.addEventListener('mouseleave', stopMoving);
            }
        });

        function eatFish(foodFish) {
            // Always eat the fish when clicked or when collision is detected
            const playerFish = document.getElementById('playerFish');
            if (!playerFish) return;
            
            // Remove the food fish
            foodFish.remove();
            
            // Show eating effect
            const playerRect = playerFish.getBoundingClientRect();
            showEatingEffect(playerRect.left, playerRect.top);
            
            // Pause game temporarily
            gameActive = false;
            
            // Show question
            showQuestion();
        }

        function hitTrash(trashItem) {
            const playerFish = document.getElementById('playerFish');
            if (!playerFish) return;
            
            // Remove the trash item
            trashItem.remove();
            
            // Reduce lives
            playerLives--;
            updateLivesDisplay();
            
            // Show damage effect
            const playerRect = playerFish.getBoundingClientRect();
            showDamageEffect(playerRect.left, playerRect.top);
            
            // Check if game over
            if (playerLives <= 0) {
                gameOver();
            }
        }

        // Add collision detection system
        function checkCollisions() {
            if (!gameActive) return;
            
            const playerFish = document.getElementById('playerFish');
            const foodFishes = document.querySelectorAll('.food-fish');
            const trashItems = document.querySelectorAll('.trash-item');
            
            if (!playerFish) return;
            
            const playerRect = playerFish.getBoundingClientRect();
            
            // Check food collisions
            foodFishes.forEach(foodFish => {
                const foodRect = foodFish.getBoundingClientRect();
                
                // Check if fish are overlapping
                const isColliding = !(playerRect.right < foodRect.left || 
                                    playerRect.left > foodRect.right || 
                                    playerRect.bottom < foodRect.top || 
                                    playerRect.top > foodRect.bottom);
                
                if (isColliding) {
                    eatFish(foodFish);
                }
            });

            // Check trash collisions
            trashItems.forEach(trashItem => {
                const trashRect = trashItem.getBoundingClientRect();
                
                // Check if fish are overlapping with trash
                const isColliding = !(playerRect.right < trashRect.left || 
                                    playerRect.left > trashRect.right || 
                                    playerRect.bottom < trashRect.top || 
                                    playerRect.top > trashRect.bottom);
                
                if (isColliding) {
                    hitTrash(trashItem);
                }
            });
        }

        function showEatingEffect(x, y) {
            const effect = document.createElement('div');
            effect.style.position = 'fixed';
            effect.style.left = x + 'px';
            effect.style.top = y + 'px';
            effect.style.fontSize = '24px';
            effect.style.color = '#FFD700';
            effect.style.fontWeight = 'bold';
            effect.style.zIndex = '1000';
            effect.style.pointerEvents = 'none';
            effect.textContent = '🍽️ +1';
            effect.style.animation = 'fadeUp 1s ease-out forwards';
            
            document.body.appendChild(effect);
            
            setTimeout(() => {
                if (effect.parentNode) {
                    effect.parentNode.removeChild(effect);
                }
            }, 1000);
        }

        function showDamageEffect(x, y) {
            const effect = document.createElement('div');
            effect.style.position = 'fixed';
            effect.style.left = x + 'px';
            effect.style.top = y + 'px';
            effect.style.fontSize = '28px';
            effect.style.color = '#FF4444';
            effect.style.fontWeight = 'bold';
            effect.style.zIndex = '1000';
            effect.style.pointerEvents = 'none';
            effect.textContent = '💥 -1 ❤️';
            effect.style.animation = 'fadeUp 1.5s ease-out forwards';
            
            document.body.appendChild(effect);
            
            setTimeout(() => {
                if (effect.parentNode) {
                    effect.parentNode.removeChild(effect);
                }
            }, 1500);
        }

        function updateLivesDisplay() {
            const livesDisplay = document.getElementById('livesDisplay');
            livesDisplay.innerHTML = '';
            
            for (let i = 0; i < 3; i++) {
                const heart = document.createElement('span');
                heart.style.fontSize = '1.5rem';
                heart.style.transition = 'all 0.3s ease';
                
                if (i < playerLives) {
                    heart.textContent = '❤️';
                } else {
                    heart.textContent = '🖤';
                    heart.style.opacity = '0.5';
                }
                
                livesDisplay.appendChild(heart);
            }
        }

        function gameOver() {
            gameActive = false;
            
            // Clear all items from game area
            const gameArea = document.getElementById('gameArea');
            const foodFishes = gameArea.querySelectorAll('.food-fish');
            const trashItems = gameArea.querySelectorAll('.trash-item');
            
            foodFishes.forEach(fish => fish.remove());
            trashItems.forEach(trash => trash.remove());
            
            // Show game over modal
            const modal = document.getElementById('questionModal');
            const content = document.getElementById('questionContent');
            
            content.innerHTML = `
                <div style="text-align: center; padding: 20px;">
                    <h2 style="color: #e74c3c; margin-bottom: 20px;">💀 Game Over!</h2>
                    <p style="font-size: 1.2rem; margin-bottom: 20px;">Nyawa habis! Ikan terlalu banyak makan sampah laut.</p>
                    <p style="margin-bottom: 30px;">Kamu sudah menjawab <strong>${currentQuestionIndex}</strong> dari ${questions.length} pertanyaan.</p>
                    <div style="display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
                        <button class="btn btn-primary" onclick="restartGame(); closeModal();">🔄 Main Lagi</button>
                        <button class="btn btn-secondary" onclick="showAdminPanel(); closeModal();">📊 Lihat Data</button>
                    </div>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        function createBubbles() {
            const gameArea = document.getElementById('gameArea');
            
            setInterval(() => {
                if (document.getElementById('gameSection').classList.contains('hidden')) return;
                
                const bubble = document.createElement('div');
                bubble.className = 'bubbles';
                bubble.style.left = Math.random() * gameArea.offsetWidth + 'px';
                bubble.style.animationDuration = (2 + Math.random() * 3) + 's';
                
                gameArea.appendChild(bubble);
                
                setTimeout(() => {
                    if (bubble.parentNode) {
                        bubble.parentNode.removeChild(bubble);
                    }
                }, 5000);
            }, 1000);
        }

        function showQuestion() {
            if (currentQuestionIndex >= questions.length) {
                completeGame();
                return;
            }
            
            const question = questions[currentQuestionIndex];
            const modal = document.getElementById('questionModal');
            const content = document.getElementById('questionContent');
            
            content.innerHTML = `
                <div class="question">
                    <h3>${question.question}</h3>
                    <div class="options">
                        ${question.options.map((option, index) => 
                            `<div class="option" onclick="selectOption(${index})" data-index="${index}">${option}</div>`
                        ).join('')}
                    </div>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        function selectOption(index) {
            // Remove previous selection
            document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
            
            // Add selection to clicked option
            document.querySelector(`[data-index="${index}"]`).classList.add('selected');
        }

        function submitAnswer() {
            const selected = document.querySelector('.option.selected');
            if (!selected) {
                alert('Silakan pilih jawaban terlebih dahulu!');
                return;
            }
            
            const question = questions[currentQuestionIndex];
            answers[question.id] = {
                question: question.question,
                answer: selected.textContent,
                answerIndex: selected.dataset.index
            };
            
            currentQuestionIndex++;
            closeModal();
            updateProgress();
            
            if (currentQuestionIndex < questions.length) {
                // Resume game after answering
                gameActive = true;
                // Restart spawning food fish and trash
                setTimeout(() => createFoodFish(), 500);
                setTimeout(() => createTrashItem(), 1000);
            } else {
                completeGame();
            }
        }

        function updateProgress() {
            const progress = (currentQuestionIndex / questions.length) * 100;
            document.getElementById('progressBar').style.width = progress + '%';
            document.getElementById('currentQuestion').textContent = currentQuestionIndex;
        }

        function completeGame() {
            gameActive = false;
            document.getElementById('gameSection').classList.add('hidden');
            document.getElementById('completionSection').classList.remove('hidden');
        }

        function closeModal() {
            document.getElementById('questionModal').style.display = 'none';
        }

        function restartGame() {
            currentQuestionIndex = 0;
            answers = {};
            studentName = '';
            gameActive = false;
            playerFishY = 250;
            playerLives = 3;
            gameSpeed = 1;
            document.getElementById('studentName').value = '';
            document.getElementById('completionSection').classList.add('hidden');
            document.getElementById('gameSection').classList.add('hidden');
            document.getElementById('nameSection').classList.remove('hidden');
            updateProgress();
            
            // Clear any remaining items
            const gameArea = document.getElementById('gameArea');
            const foodFishes = gameArea.querySelectorAll('.food-fish');
            const trashItems = gameArea.querySelectorAll('.trash-item');
            foodFishes.forEach(fish => fish.remove());
            trashItems.forEach(trash => trash.remove());
        }

        async function saveData() {
            const surveyData = {
                timestamp: new Date().toISOString(),
                name: studentName,
                answers: answers
            };

            try {
                const response = await fetch('https://script.google.com/macros/s/AKfycbxi52ntUKbE2y-mrSN3xA4IDYrANXksyryEsMSvNNquvSz1uQNdPee14X5EdtBO2jAc/exec', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'text/plain;charset=utf-8'
                    },
                    body: JSON.stringify(surveyData)
                });

                if (response.ok) {
                    alert('✅ Data berhasil disimpan! Terima kasih atas partisipasimu.');
                } else {
                    throw new Error('Gagal menyimpan data');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('❌ Terjadi kesalahan saat menyimpan data. Silakan coba lagi.');
            }
        }

        function showAdminPanel() {
            document.getElementById('adminModal').style.display = 'block';
        }

        function closeAdminModal() {
            document.getElementById('adminModal').style.display = 'none';
            document.getElementById('adminCode').value = '';
            document.getElementById('adminContent').classList.add('hidden');
        }

        async function checkAdminCode() {
            const code = document.getElementById('adminCode').value;
            if (code === 'diancantik') {
                document.getElementById('adminContent').classList.remove('hidden');
                await loadSurveyData();
            } else {
                alert('Kode admin salah!');
            }
        }

        async function loadSurveyData() {
            // Show loading indicator
            document.getElementById('dataVisualization').innerHTML = '<div style="text-align: center; padding: 40px;"><div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div><p>Memuat data...</p></div>';
            
            try {
                // Try to load from API first
                const response = await fetch('https://script.google.com/macros/s/AKfycbxi52ntUKbE2y-mrSN3xA4IDYrANXksyryEsMSvNNquvSz1uQNdPee14X5EdtBO2jAc/exec');
                let data = [];
                
                if (response.ok) {
                    const responseData = await response.json();
                    // Ensure data is always an array
                    if (Array.isArray(responseData)) {
                        data = responseData;
                    } else if (responseData && typeof responseData === 'object') {
                        // If response is an object, try to extract array from it
                        data = responseData.data || responseData.results || [];
                    } else {
                        data = [];
                    }
                } else {
                    throw new Error('API tidak tersedia');
                }
                
                // If no valid data from API, use sample data for demo
                if (!Array.isArray(data) || data.length === 0) {
                    data = generateSampleData();
                    // Show info message about using sample data
                    setTimeout(() => {
                        const currentContent = document.getElementById('dataVisualization').innerHTML;
                        document.getElementById('dataVisualization').innerHTML = 
                            '<div style="background: #fff3cd; color: #856404; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #ffeaa7;"><strong>ℹ️ Info:</strong> Menampilkan data contoh karena belum ada data survei atau koneksi terbatas. Data asli akan muncul setelah ada siswa yang mengisi survei.</div>' + 
                            currentContent;
                    }, 100);
                }
                
                displayDataVisualization(data);
                displayIndividualData(data);
            } catch (error) {
                console.error('Error loading data:', error);
                // Use sample data when API fails
                const sampleData = generateSampleData();
                displayDataVisualization(sampleData);
                displayIndividualData(sampleData);
                
                // Show info message
                setTimeout(() => {
                    const currentContent = document.getElementById('dataVisualization').innerHTML;
                    document.getElementById('dataVisualization').innerHTML = 
                        '<div style="background: #fff3cd; color: #856404; padding: 15px; border-radius: 10px; margin-bottom: 20px; border: 1px solid #ffeaa7;"><strong>ℹ️ Info:</strong> Menampilkan data contoh karena koneksi ke server terbatas. Data asli akan muncul saat tersambung ke internet.</div>' + 
                        currentContent;
                }, 100);
            }
        }

        function generateSampleData() {
            const sampleNames = ['Ahmad Rizki', 'Siti Nurhaliza', 'Budi Santoso', 'Dewi Lestari', 'Andi Pratama', 'Maya Sari', 'Rudi Hermawan', 'Lina Marlina', 'Doni Setiawan', 'Rina Wati'];
            const sampleData = [];
            
            for (let i = 0; i < 10; i++) {
                const answers = {};
                questions.forEach(q => {
                    const randomIndex = Math.floor(Math.random() * q.options.length);
                    answers[q.id] = {
                        question: q.question,
                        answer: q.options[randomIndex],
                        answerIndex: randomIndex.toString()
                    };
                });
                
                sampleData.push({
                    timestamp: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
                    name: sampleNames[i],
                    answers: answers
                });
            }
            
            return sampleData;
        }

        function displayDataVisualization(data) {
            const visualization = document.getElementById('dataVisualization');
            
            // Ensure data is an array
            if (!Array.isArray(data) || data.length === 0) {
                visualization.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;"><h3>📊 Belum ada data survei</h3><p>Data akan muncul setelah ada siswa yang mengisi survei.</p></div>';
                return;
            }

            // Create beautiful dashboard header
            let analysisHTML = `
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; margin-bottom: 30px; text-align: center; box-shadow: 0 10px 30px rgba(0,0,0,0.2);">
                    <h2 style="margin: 0 0 10px 0; font-size: 2.2rem;">📊 Dashboard Analisis Survei</h2>
                    <p style="margin: 0; font-size: 1.1rem; opacity: 0.9;">Hasil Survei Minat Belajar Siswa</p>
                    <div style="display: flex; justify-content: center; gap: 40px; margin-top: 20px; flex-wrap: wrap;">
                        <div style="text-align: center;">
                            <div style="font-size: 2.5rem; font-weight: bold;">${data.length}</div>
                            <div style="font-size: 0.9rem; opacity: 0.8;">Total Responden</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2.5rem; font-weight: bold;">${questions.length}</div>
                            <div style="font-size: 0.9rem; opacity: 0.8;">Pertanyaan</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2.5rem; font-weight: bold;">100%</div>
                            <div style="font-size: 0.9rem; opacity: 0.8;">Tingkat Penyelesaian</div>
                        </div>
                    </div>
                </div>
            `;

            // Create summary insights
            const insights = generateInsights(data);
            analysisHTML += `
                <div style="background: white; padding: 25px; border-radius: 15px; margin-bottom: 30px; box-shadow: 0 5px 20px rgba(0,0,0,0.1);">
                    <h3 style="color: #2c3e50; margin-bottom: 20px; display: flex; align-items: center;"><span style="margin-right: 10px;">💡</span>Insight Utama</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                        ${insights.map(insight => `
                            <div style="background: ${insight.color}; padding: 20px; border-radius: 10px; color: white;">
                                <div style="font-size: 1.1rem; font-weight: bold; margin-bottom: 8px;">${insight.title}</div>
                                <div style="opacity: 0.9;">${insight.description}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
            
            // Analyze each question with beautiful cards
            questions.forEach((q, index) => {
                const questionData = {};
                data.forEach(response => {
                    if (response.answers && response.answers[q.id]) {
                        const answer = response.answers[q.id].answer;
                        questionData[answer] = (questionData[answer] || 0) + 1;
                    }
                });

                if (Object.keys(questionData).length > 0) {
                    const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F8B500'];
                    const sortedData = Object.entries(questionData).sort((a, b) => b[1] - a[1]);
                    const topAnswer = sortedData[0];
                    
                    analysisHTML += `
                        <div style="background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px; box-shadow: 0 5px 20px rgba(0,0,0,0.1); border-left: 5px solid ${colors[index % colors.length]};">
                            <div style="display: flex; justify-content: between; align-items: start; margin-bottom: 20px;">
                                <div style="flex: 1;">
                                    <h4 style="color: #2c3e50; margin: 0 0 10px 0; font-size: 1.2rem;">Q${q.id}. ${q.question}</h4>
                                    <div style="background: ${colors[index % colors.length]}20; color: ${colors[index % colors.length]}; padding: 8px 15px; border-radius: 20px; display: inline-block; font-size: 0.9rem; font-weight: bold;">
                                        Jawaban Terpopuler: ${topAnswer[0]} (${((topAnswer[1] / data.length) * 100).toFixed(1)}%)
                                    </div>
                                </div>
                            </div>
                            <div style="display: grid; gap: 12px;">
                                ${sortedData.map(([answer, count], idx) => {
                                    const percentage = ((count / data.length) * 100).toFixed(1);
                                    const barColor = colors[idx % colors.length];
                                    return `
                                        <div style="background: #f8f9fa; border-radius: 8px; padding: 15px; border-left: 4px solid ${barColor};">
                                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                                <span style="font-weight: 500; color: #2c3e50;">${answer}</span>
                                                <span style="background: ${barColor}; color: white; padding: 4px 12px; border-radius: 15px; font-size: 0.85rem; font-weight: bold;">
                                                    ${count} siswa (${percentage}%)
                                                </span>
                                            </div>
                                            <div style="background: #e9ecef; height: 8px; border-radius: 4px; overflow: hidden;">
                                                <div style="background: linear-gradient(90deg, ${barColor}, ${barColor}aa); height: 100%; width: ${percentage}%; border-radius: 4px; transition: width 0.5s ease;"></div>
                                            </div>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    `;
                }
            });

            visualization.innerHTML = analysisHTML;
        }

        function generateInsights(data) {
            const insights = [];
            
            // Ensure data is an array
            if (!Array.isArray(data) || data.length === 0) {
                return [{
                    title: "Belum Ada Data",
                    description: "Belum ada siswa yang mengisi survei. Data akan muncul setelah ada responden.",
                    color: "linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)"
                }];
            }
            
            // Most popular subject
            const subjectData = {};
            data.forEach(response => {
                if (response && response.answers && response.answers[1]) {
                    const subject = response.answers[1].answer;
                    subjectData[subject] = (subjectData[subject] || 0) + 1;
                }
            });
            const topSubject = Object.entries(subjectData).sort((a, b) => b[1] - a[1])[0];
            if (topSubject) {
                insights.push({
                    title: "Mata Pelajaran Favorit",
                    description: `${topSubject[0]} menjadi pilihan ${topSubject[1]} siswa (${((topSubject[1] / data.length) * 100).toFixed(1)}%)`,
                    color: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
                });
            }

            // Most popular learning method
            const methodData = {};
            data.forEach(response => {
                if (response && response.answers && response.answers[2]) {
                    const method = response.answers[2].answer;
                    methodData[method] = (methodData[method] || 0) + 1;
                }
            });
            const topMethod = Object.entries(methodData).sort((a, b) => b[1] - a[1])[0];
            if (topMethod) {
                insights.push({
                    title: "Metode Belajar Terpopuler",
                    description: `${topMethod[0]} dipilih oleh ${topMethod[1]} siswa (${((topMethod[1] / data.length) * 100).toFixed(1)}%)`,
                    color: "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)"
                });
            }

            // Learning time preference
            const timeData = {};
            data.forEach(response => {
                if (response && response.answers && response.answers[3]) {
                    const time = response.answers[3].answer;
                    timeData[time] = (timeData[time] || 0) + 1;
                }
            });
            const topTime = Object.entries(timeData).sort((a, b) => b[1] - a[1])[0];
            if (topTime) {
                insights.push({
                    title: "Waktu Belajar Ideal",
                    description: `${topTime[0]} menjadi waktu favorit ${topTime[1]} siswa (${((topTime[1] / data.length) * 100).toFixed(1)}%)`,
                    color: "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)"
                });
            }

            // If no insights were generated, show default message
            if (insights.length === 0) {
                insights.push({
                    title: "Data Sedang Diproses",
                    description: "Sistem sedang menganalisis data survei. Insight akan muncul setelah ada lebih banyak responden.",
                    color: "linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)"
                });
            }

            return insights;
        }

        function displayIndividualData(data) {
            const individualDiv = document.getElementById('individualData');
            
            // Ensure data is an array
            if (!Array.isArray(data) || data.length === 0) {
                individualDiv.innerHTML = '<div style="text-align: center; padding: 40px; color: #666;"><h3>👥 Belum ada data individual</h3><p>Data siswa akan muncul di sini setelah survei diisi.</p></div>';
                return;
            }

            let tableHTML = `
                <div style="background: white; border-radius: 15px; padding: 25px; margin-top: 30px; box-shadow: 0 5px 20px rgba(0,0,0,0.1);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px;">
                        <h3 style="color: #2c3e50; margin: 0; display: flex; align-items: center;">
                            <span style="margin-right: 10px;">👥</span>Data Individual Siswa
                        </h3>
                        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 8px 16px; border-radius: 20px; font-size: 0.9rem; font-weight: bold;">
                            ${data.length} Responden
                        </div>
                    </div>
                    
                    <div style="overflow-x: auto;">
                        <table style="width: 100%; border-collapse: collapse; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                            <thead>
                                <tr style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                                    <th style="padding: 15px 12px; text-align: left; font-weight: 600; border: none;">No</th>
                                    <th style="padding: 15px 12px; text-align: left; font-weight: 600; border: none;">Nama Siswa</th>
                                    <th style="padding: 15px 12px; text-align: left; font-weight: 600; border: none;">Waktu Pengisian</th>
                                    <th style="padding: 15px 12px; text-align: left; font-weight: 600; border: none;">Mapel Favorit</th>
                                    <th style="padding: 15px 12px; text-align: left; font-weight: 600; border: none;">Metode Belajar</th>
                                    <th style="padding: 15px 12px; text-align: center; font-weight: 600; border: none;">Aksi</th>
                                </tr>
                            </thead>
                            <tbody>
            `;

            data.forEach((response, index) => {
                const timestamp = new Date(response.timestamp).toLocaleString('id-ID');
                const favoriteSubject = response.answers && response.answers[1] ? response.answers[1].answer : 'Tidak dijawab';
                const learningStyle = response.answers && response.answers[2] ? response.answers[2].answer : 'Tidak dijawab';
                const rowColor = index % 2 === 0 ? '#f8f9fa' : 'white';
                
                tableHTML += `
                    <tr style="background: ${rowColor}; transition: all 0.3s ease;" onmouseover="this.style.background='#e3f2fd'" onmouseout="this.style.background='${rowColor}'">
                        <td style="padding: 15px 12px; border: none; font-weight: 600; color: #667eea;">${index + 1}</td>
                        <td style="padding: 15px 12px; border: none; color: #2c3e50; font-weight: 500;">
                            <div style="display: flex; align-items: center;">
                                <div style="width: 35px; height: 35px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; margin-right: 12px; font-size: 0.9rem;">
                                    ${response.name.charAt(0).toUpperCase()}
                                </div>
                                ${response.name}
                            </div>
                        </td>
                        <td style="padding: 15px 12px; border: none; color: #666; font-size: 0.9rem;">${timestamp}</td>
                        <td style="padding: 15px 12px; border: none;">
                            <span style="background: #e8f5e8; color: #2e7d32; padding: 4px 12px; border-radius: 15px; font-size: 0.85rem; font-weight: 500;">
                                ${favoriteSubject}
                            </span>
                        </td>
                        <td style="padding: 15px 12px; border: none;">
                            <span style="background: #e3f2fd; color: #1976d2; padding: 4px 12px; border-radius: 15px; font-size: 0.85rem; font-weight: 500;">
                                ${learningStyle}
                            </span>
                        </td>
                        <td style="padding: 15px 12px; border: none; text-align: center;">
                            <button onclick="showDetailedResponse(${index})" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 8px 16px; border-radius: 20px; cursor: pointer; font-size: 0.85rem; font-weight: 500; transition: all 0.3s ease; box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 12px rgba(102, 126, 234, 0.4)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 8px rgba(102, 126, 234, 0.3)'">
                                📋 Detail
                            </button>
                        </td>
                    </tr>
                `;
            });

            tableHTML += `
                            </tbody>
                        </table>
                    </div>
                    
                    <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 10px; text-align: center; color: #666; font-size: 0.9rem;">
                        💡 <strong>Tips:</strong> Klik tombol "Detail" untuk melihat jawaban lengkap setiap siswa
                    </div>
                </div>
            `;

            individualDiv.innerHTML = tableHTML;

            // Store data for detailed view
            window.surveyData = data;
        }

        function showDetailedResponse(index) {
            const response = window.surveyData[index];
            let detailHTML = `
                <div style="background: white; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                    <h4>Detail Jawaban: ${response.name}</h4>
                    <p><strong>Waktu:</strong> ${new Date(response.timestamp).toLocaleString('id-ID')}</p>
                    <hr style="margin: 15px 0;">
            `;

            questions.forEach(q => {
                if (response.answers && response.answers[q.id]) {
                    detailHTML += `
                        <div style="margin: 15px 0; padding: 10px; background: #f8f9fa; border-radius: 5px;">
                            <strong>Q${q.id}:</strong> ${q.question}<br>
                            <strong>Jawaban:</strong> ${response.answers[q.id].answer}
                        </div>
                    `;
                }
            });

            detailHTML += '</div>';
            
            // Create modal for detailed view
            const detailModal = document.createElement('div');
            detailModal.className = 'modal';
            detailModal.style.display = 'block';
            detailModal.innerHTML = `
                <div class="modal-content">
                    <span class="close" onclick="this.parentElement.parentElement.remove()">&times;</span>
                    ${detailHTML}
                </div>
            `;
            
            document.body.appendChild(detailModal);
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        // Initialize bubbles when page loads
        window.onload = function() {
            createBubbles();
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'972b5f8856f3d572',t:'MTc1NTc5MjMzOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
