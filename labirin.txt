<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Labirin Gaya Belajar - Petualangan Bawah Laut</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Nunito:wght@400;600;700&display=swap');
        
        .pixel-font {
            font-family: 'Press Start 2P', cursive;
        }
        
        .content-font {
            font-family: 'Nunito', sans-serif;
        }
        
        .maze-container {
            background: linear-gradient(45deg, #0f172a, #1e293b);
            border: 2px solid #06b6d4;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(6, 182, 212, 0.5);
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
            padding: 2px;
            max-width: 100%;
            overflow: hidden;
        }
        
        @media (min-width: 640px) {
            .maze-container {
                border: 4px solid #06b6d4;
                border-radius: 10px;
                padding: 3px;
            }
        }
        
        @media (min-width: 1024px) {
            .maze-container {
                border: 6px solid #06b6d4;
                border-radius: 12px;
                box-shadow: 0 0 30px rgba(6, 182, 212, 0.5);
                padding: 4px;
            }
        }
        
        .maze-cell {
            width: 16px;
            height: 16px;
            display: inline-block;
            position: relative;
            font-size: 12px;
            line-height: 16px;
            text-align: center;
            vertical-align: top;
        }
        
        @media (min-width: 640px) {
            .maze-cell {
                width: 20px;
                height: 20px;
                font-size: 14px;
                line-height: 20px;
            }
        }
        
        @media (min-width: 768px) {
            .maze-cell {
                width: 24px;
                height: 24px;
                font-size: 16px;
                line-height: 24px;
            }
        }
        
        @media (min-width: 1024px) {
            .maze-cell {
                width: 28px;
                height: 28px;
                font-size: 20px;
                line-height: 28px;
            }
        }
        
        .wall { 
            background: linear-gradient(45deg, #475569, #64748b);
            border: 1px solid #334155;
            box-shadow: inset 0 0 4px rgba(71, 85, 105, 0.8);
        }
        .coral-wall {
            background: linear-gradient(45deg, #f97316, #ea580c);
            border: 1px solid #c2410c;
            box-shadow: inset 0 0 4px rgba(249, 115, 22, 0.8);
        }
        .path { 
            background: linear-gradient(45deg, #0ea5e9, #0284c7);
            border: 1px solid #0369a1;
        }
        .player { 
            background: radial-gradient(circle, #06b6d4, #0891b2);
            border: 2px solid #ffffff;
            border-radius: 50%;
            position: relative;
            z-index: 10;
            box-shadow: 0 0 10px rgba(6, 182, 212, 0.8);
            animation: player-glow 2s infinite alternate;
        }
        .monster {
            background: radial-gradient(circle, #7c2d12, #dc2626);
            border: 2px solid #000000;
            border-radius: 50%;
            position: relative;
            z-index: 9;
            box-shadow: 0 0 8px rgba(124, 45, 18, 0.8);
            animation: monster-glow 1.5s infinite alternate;
        }
        .question-box { 
            background: linear-gradient(45deg, #fbbf24, #f59e0b);
            border: 2px solid #d97706;
            border-radius: 4px;
            animation: question-pulse 1.5s infinite;
            box-shadow: 0 0 15px rgba(251, 191, 36, 0.6);
        }
        .completed-box { 
            background: linear-gradient(45deg, #10b981, #059669);
            border: 2px solid #047857;
            border-radius: 4px;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }
        
        @keyframes player-glow {
            0% { box-shadow: 0 0 10px rgba(6, 182, 212, 0.8); }
            100% { box-shadow: 0 0 20px rgba(6, 182, 212, 1); }
        }
        
        @keyframes monster-glow {
            0% { box-shadow: 0 0 8px rgba(124, 45, 18, 0.8); }
            100% { box-shadow: 0 0 15px rgba(124, 45, 18, 1); }
        }
        
        @keyframes question-pulse {
            0%, 100% { 
                transform: scale(1);
                box-shadow: 0 0 15px rgba(251, 191, 36, 0.6);
            }
            50% { 
                transform: scale(1.1);
                box-shadow: 0 0 25px rgba(251, 191, 36, 0.9);
            }
        }
        
        .mario-jump {
            transition: all 0.2s ease-in-out;
        }
        
        .damage-flash {
            animation: damage 0.5s ease-in-out;
        }
        
        @keyframes damage {
            0%, 100% { filter: brightness(1); }
            25%, 75% { filter: brightness(2) hue-rotate(180deg); }
            50% { filter: brightness(0.5); }
        }
        
        .print-area {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        @media print {
            body * { visibility: hidden; }
            .print-area, .print-area * { visibility: visible; }
            .print-area { position: absolute; left: 0; top: 0; width: 100%; }
            .no-print { display: none !important; }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-900 via-teal-800 to-cyan-900 min-h-screen content-font">
    <!-- Header -->
    <div class="text-center py-6">
        <h1 class="pixel-font text-2xl md:text-4xl text-cyan-400 mb-2">
            üåä LABIRIN GAYA BELAJAR üåä
        </h1>
        <p class="text-white text-sm md:text-base">
            Petualangan Bawah Laut untuk Menemukan Gaya Belajarmu!
        </p>
    </div>

    <!-- Main Menu -->
    <div id="main-menu" class="max-w-2xl mx-auto px-4">
        <div class="bg-black border-4 border-cyan-400 rounded-lg p-6 mb-6">
            <div class="text-center mb-6">
                <div class="text-6xl mb-4">üåä</div>
                <h2 class="pixel-font text-xl text-cyan-400 mb-4">SELAMAT DATANG!</h2>
            </div>
            
            <!-- Name Input -->
            <div class="mb-6">
                <label class="block text-white pixel-font text-sm mb-2">MASUKKAN NAMA:</label>
                <input type="text" id="player-name" class="w-full p-3 bg-gray-800 text-white border-2 border-gray-600 rounded focus:border-cyan-400 focus:outline-none" placeholder="Nama Kamu...">
            </div>
            
            <!-- Menu Buttons -->
            <div class="space-y-4">
                <button onclick="startGame()" class="w-full bg-green-600 hover:bg-green-700 text-white pixel-font text-sm py-3 px-6 rounded border-2 border-green-400 transition-all duration-200 transform hover:scale-105">
                    üèä‚Äç‚ôÇÔ∏è MULAI PETUALANGAN
                </button>
                <button onclick="showResults()" class="w-full bg-blue-600 hover:bg-blue-700 text-white pixel-font text-sm py-3 px-6 rounded border-2 border-blue-400 transition-all duration-200 transform hover:scale-105">
                    üìä LIHAT HASIL
                </button>
            </div>
        </div>
    </div>

    <!-- Game Screen -->
    <div id="game-screen" class="hidden max-w-6xl mx-auto px-4">
        <!-- Back to Welcome Button -->
        <div class="mb-4">
            <button onclick="backToWelcome()" class="bg-gray-600 hover:bg-gray-700 text-white pixel-font text-xs px-4 py-2 rounded border-2 border-gray-400 transition-all duration-200">
                ‚¨ÖÔ∏è KEMBALI
            </button>
        </div>
        
        <!-- Game Info -->
        <div class="bg-black border-2 border-cyan-400 rounded-lg p-2 sm:p-4 mb-4">
            <div class="grid grid-cols-2 sm:flex sm:flex-wrap sm:justify-between items-center text-white pixel-font text-xs gap-2">
                <div class="truncate">PLAYER: <span id="current-player" class="text-yellow-400"></span></div>
                <div>SOAL: <span id="questions-completed" class="text-green-400">0</span>/12</div>
                <div>‚ù§Ô∏è <span id="lives" class="text-red-400">3</span></div>
                <div>SKOR: <span id="score" class="text-blue-400">0</span></div>
            </div>
        </div>
        
        <!-- Maze Container -->
        <div class="flex justify-center mb-4 px-2">
            <div class="w-full max-w-sm sm:max-w-md md:max-w-lg lg:max-w-xl xl:max-w-2xl">
                <div id="maze-container" class="maze-container relative mx-auto">
                    <!-- Maze will be generated here -->
                </div>
            </div>
        </div>
        
        <!-- Controls -->
        <div class="text-center mb-4 px-4">
            <p class="text-white text-xs sm:text-sm mb-2">Gunakan tombol panah atau WASD untuk bergerak. Hindari hiu!</p>
            <div class="grid grid-cols-3 gap-1 sm:gap-2 max-w-xs mx-auto">
                <div></div>
                <button class="bg-gray-700 text-white p-1 sm:p-2 rounded text-sm sm:text-base" onclick="movePlayer('up')">‚¨ÜÔ∏è</button>
                <div></div>
                <button class="bg-gray-700 text-white p-1 sm:p-2 rounded text-sm sm:text-base" onclick="movePlayer('left')">‚¨ÖÔ∏è</button>
                <button class="bg-gray-700 text-white p-1 sm:p-2 rounded text-sm sm:text-base" onclick="movePlayer('down')">‚¨áÔ∏è</button>
                <button class="bg-gray-700 text-white p-1 sm:p-2 rounded text-sm sm:text-base" onclick="movePlayer('right')">‚û°Ô∏è</button>
            </div>
        </div>
    </div>

    <!-- Question Modal -->
    <div id="question-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <div class="text-center flex-1">
                        <div class="text-4xl mb-2">üì¶</div>
                        <h3 class="pixel-font text-lg text-blue-600">KOTAK SOAL DITEMUKAN!</h3>
                    </div>
                    <button onclick="closeQuestion()" class="text-red-500 hover:text-red-700 text-2xl font-bold ml-4">
                        ‚ùå
                    </button>
                </div>
                
                <div id="question-content" class="mb-6">
                    <!-- Question content will be inserted here -->
                </div>
                
                <div id="question-options" class="space-y-3">
                    <!-- Options will be inserted here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Results Screen -->
    <div id="results-screen" class="hidden max-w-4xl mx-auto px-4">
        <!-- Back to Welcome Button -->
        <div class="mb-4">
            <button onclick="backToWelcome()" class="bg-gray-600 hover:bg-gray-700 text-white pixel-font text-xs px-4 py-2 rounded border-2 border-gray-400 transition-all duration-200">
                ‚¨ÖÔ∏è KEMBALI
            </button>
        </div>
        
        <div class="bg-white rounded-lg shadow-2xl p-6">
            <h2 class="pixel-font text-2xl text-center text-blue-600 mb-6">üìä HASIL DIAGNOSTIK</h2>
            
            <!-- Student Selector -->
            <div class="mb-6">
                <label class="block text-gray-700 font-semibold mb-2">Pilih Siswa:</label>
                <select id="student-selector" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none" onchange="loadStudentResult()">
                    <option value="">-- Pilih Siswa --</option>
                </select>
            </div>
            
            <!-- Results Display -->
            <div id="student-results" class="hidden print-area">
                <div class="text-center mb-6">
                    <h3 class="text-2xl font-bold text-gray-800 mb-2">Laporan Gaya Belajar</h3>
                    <p class="text-gray-600">Nama Siswa: <span id="selected-student-name" class="font-semibold text-blue-600"></span></p>
                    <p class="text-gray-600">Tanggal: <span id="test-date" class="font-semibold"></span></p>
                </div>
                
                <!-- Learning Style Chart -->
                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <h4 class="font-bold text-lg mb-4 text-gray-800">Persentase Gaya Belajar</h4>
                        <div class="space-y-4">
                            <div>
                                <div class="flex justify-between mb-1">
                                    <span class="text-sm font-medium text-blue-700">üëÅÔ∏è Visual</span>
                                    <span id="visual-percent" class="text-sm font-medium text-blue-700">0%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2.5">
                                    <div id="visual-bar" class="bg-blue-600 h-2.5 rounded-full transition-all duration-1000" style="width: 0%"></div>
                                </div>
                            </div>
                            <div>
                                <div class="flex justify-between mb-1">
                                    <span class="text-sm font-medium text-green-700">üëÇ Auditori</span>
                                    <span id="auditory-percent" class="text-sm font-medium text-green-700">0%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2.5">
                                    <div id="auditory-bar" class="bg-green-600 h-2.5 rounded-full transition-all duration-1000" style="width: 0%"></div>
                                </div>
                            </div>
                            <div>
                                <div class="flex justify-between mb-1">
                                    <span class="text-sm font-medium text-purple-700">‚úã Kinestetik</span>
                                    <span id="kinesthetic-percent" class="text-sm font-medium text-purple-700">0%</span>
                                </div>
                                <div class="w-full bg-gray-200 rounded-full h-2.5">
                                    <div id="kinesthetic-bar" class="bg-purple-600 h-2.5 rounded-full transition-all duration-1000" style="width: 0%"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <h4 class="font-bold text-lg mb-4 text-gray-800">Gaya Belajar Dominan</h4>
                        <div id="dominant-style" class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4">
                            <!-- Dominant style info will be inserted here -->
                        </div>
                    </div>
                </div>
                
                <!-- Recommendations -->
                <div class="mb-6">
                    <h4 class="font-bold text-lg mb-4 text-gray-800">Rekomendasi Pembelajaran</h4>
                    <div id="recommendations" class="bg-yellow-50 rounded-lg p-4">
                        <!-- Recommendations will be inserted here -->
                    </div>
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div id="result-actions" class="hidden no-print flex flex-wrap gap-4 justify-center">
                <button onclick="printResult()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200">
                    üñ®Ô∏è Cetak Laporan
                </button>
                <button onclick="sendToWhatsApp()" class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200">
                    üì± Kirim ke WhatsApp
                </button>
            </div>
        </div>
    </div>

    <!-- Game Complete Modal -->
    <div id="complete-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg max-w-md w-full p-6 text-center">
            <div class="text-6xl mb-4">üèÜ</div>
            <h3 class="pixel-font text-xl text-yellow-600 mb-4">SELAMAT!</h3>
            <p class="text-gray-700 mb-6">Kamu telah menyelesaikan semua soal dalam labirin!</p>
            <div id="final-result" class="bg-blue-50 rounded-lg p-4 mb-6">
                <!-- Final result will be shown here -->
            </div>
            <div class="space-y-3">
                <button onclick="saveCurrentResult()" class="w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200">
                    üíæ Simpan Hasil
                </button>
                <button onclick="backToWelcome()" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
                    üè† Kembali ke Menu
                </button>
            </div>
        </div>
    </div>

    <!-- Game Over Modal -->
    <div id="game-over-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg max-w-md w-full p-6 text-center">
            <div class="text-6xl mb-4">üíÄ</div>
            <h3 class="pixel-font text-xl text-red-600 mb-4">GAME OVER!</h3>
            <p class="text-gray-700 mb-6">Nyawa kamu habis! Monster berhasil menangkapmu.</p>
            <div class="space-y-3">
                <button onclick="restartGame()" class="w-full bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-lg font-semibold">
                    üîÑ Main Lagi
                </button>
                <button onclick="backToWelcome()" class="w-full bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold">
                    üè† Kembali ke Menu
                </button>
            </div>
        </div>
    </div>

    <script>
        // Game variables
        let currentPlayer = '';
        let playerPosition = { x: 1, y: 1 };
        let questionsCompleted = 0;
        let lives = 3;
        let score = 0;
        let gameScores = { visual: 0, auditory: 0, kinesthetic: 0 };
        let questionBoxes = [];
        let completedBoxes = [];
        let currentQuestionIndex = 0;
        let monsters = [];
        let gameInterval;
        let isGameRunning = false;

        // API endpoint
        const API_ENDPOINT = 'https://script.google.com/macros/s/AKfycbxhTRzbSZDXlBS-iKSHHD7o-B132yorVih6daT7xHJJKjn81oUYyc-i02mbCmGgtGeF-Q/exec';

        // Maze layout (1 = wall, 0 = path, 2 = question box)
        const mazeLayout = [
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,2,0,0,1],
            [1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1],
            [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1],
            [1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1],
            [1,0,0,0,0,0,1,0,0,2,0,0,1,0,0,0,0,0,0,1],
            [1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1],
            [1,2,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,2,1],
            [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1],
            [1,0,1,0,0,0,0,0,0,2,0,0,0,0,0,0,1,0,0,1],
            [1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1],
            [1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,2,1],
            [1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1],
            [1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1],
            [1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1],
            [1,0,0,0,1,0,1,0,0,2,0,0,1,0,1,0,0,0,0,1],
            [1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1],
            [1,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,1],
            [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];

        // Questions data
        const questions = [
            {
                text: "Kamu sedang belajar tentang hewan. Cara mana yang paling kamu sukai?",
                options: [
                    { text: "üìñ Membaca buku tentang hewan", type: "visual" },
                    { text: "üéß Mendengarkan cerita tentang hewan", type: "auditory" },
                    { text: "üé≠ Bermain peran menjadi hewan", type: "kinesthetic" }
                ]
            },
            {
                text: "Guru memberikan tugas membuat poster. Kamu akan:",
                options: [
                    { text: "üñçÔ∏è Menggambar dan mewarnai dengan indah", type: "visual" },
                    { text: "üéµ Menambahkan musik atau suara", type: "auditory" },
                    { text: "‚úã Membuat poster 3D yang bisa disentuh", type: "kinesthetic" }
                ]
            },
            {
                text: "Saat belajar matematika, kamu lebih suka:",
                options: [
                    { text: "üìä Melihat gambar dan diagram", type: "visual" },
                    { text: "üëÇ Mendengar penjelasan guru", type: "auditory" },
                    { text: "üî¢ Menggunakan benda untuk menghitung", type: "kinesthetic" }
                ]
            },
            {
                text: "Untuk mengingat nama negara, kamu akan:",
                options: [
                    { text: "üó∫Ô∏è Melihat peta berwarna-warni", type: "visual" },
                    { text: "üé§ Menyanyikan lagu tentang negara", type: "auditory" },
                    { text: "üß© Membuat puzzle peta", type: "kinesthetic" }
                ]
            },
            {
                text: "Saat mengerjakan PR, kamu lebih fokus jika:",
                options: [
                    { text: "‚ú® Tempat belajar rapi dan bersih", type: "visual" },
                    { text: "üéº Ada musik lembut di latar belakang", type: "auditory" },
                    { text: "üö∂ Bisa bergerak atau berjalan-jalan", type: "kinesthetic" }
                ]
            },
            {
                text: "Dalam pelajaran sains, kamu paling senang:",
                options: [
                    { text: "üìπ Melihat gambar dan video eksperimen", type: "visual" },
                    { text: "üó£Ô∏è Mendengar penjelasan tentang percobaan", type: "auditory" },
                    { text: "‚öóÔ∏è Melakukan eksperimen sendiri", type: "kinesthetic" }
                ]
            },
            {
                text: "Saat membaca cerita, kamu:",
                options: [
                    { text: "üí≠ Membayangkan gambar dalam pikiran", type: "visual" },
                    { text: "üì¢ Membaca dengan suara keras", type: "auditory" },
                    { text: "üé™ Memerankan tokoh dalam cerita", type: "kinesthetic" }
                ]
            },
            {
                text: "Untuk mengingat pelajaran, kamu suka:",
                options: [
                    { text: "üåà Membuat catatan berwarna-warni", type: "visual" },
                    { text: "üéôÔ∏è Merekam suara dan mendengarnya lagi", type: "auditory" },
                    { text: "üíÉ Membuat gerakan atau tarian", type: "kinesthetic" }
                ]
            },
            {
                text: "Di kelas, kamu paling suka duduk:",
                options: [
                    { text: "üëÄ Di depan agar bisa melihat papan tulis", type: "visual" },
                    { text: "üëÇ Di tengah agar bisa mendengar dengan jelas", type: "auditory" },
                    { text: "ü™ë Di mana saja, yang penting bisa bergerak", type: "kinesthetic" }
                ]
            },
            {
                text: "Game edukasi favorit kamu adalah:",
                options: [
                    { text: "üß© Puzzle dan teka-teki gambar", type: "visual" },
                    { text: "üéµ Game dengan musik dan suara", type: "auditory" },
                    { text: "üïπÔ∏è Game yang butuh gerakan tubuh", type: "kinesthetic" }
                ]
            },
            {
                text: "Saat kerja kelompok, kamu biasanya:",
                options: [
                    { text: "üìã Membuat diagram dan gambar", type: "visual" },
                    { text: "üé§ Memimpin diskusi dan presentasi", type: "auditory" },
                    { text: "üî® Membuat model atau prakarya", type: "kinesthetic" }
                ]
            },
            {
                text: "Kamu merasa paling pintar saat:",
                options: [
                    { text: "üé® Bisa menggambar atau membuat sesuatu yang indah", type: "visual" },
                    { text: "üí¨ Bisa menjelaskan sesuatu dengan baik", type: "auditory" },
                    { text: "üîß Bisa membuat atau memperbaiki sesuatu", type: "kinesthetic" }
                ]
            }
        ];

        // Initialize game
        function initGame() {
            // Find question boxes in maze
            questionBoxes = [];
            for (let y = 0; y < mazeLayout.length; y++) {
                for (let x = 0; x < mazeLayout[y].length; x++) {
                    if (mazeLayout[y][x] === 2) {
                        questionBoxes.push({ x, y, completed: false });
                    }
                }
            }
            
            // Initialize monsters
            initMonsters();
            
            // Keyboard controls
            document.addEventListener('keydown', handleKeyPress);
        }

        function initMonsters() {
            monsters = [
                { x: 18, y: 1, direction: 'left' },
                { x: 1, y: 7, direction: 'right' },
                { x: 18, y: 13, direction: 'left' },
                { x: 9, y: 9, direction: 'up' }
            ];
        }

        function startGame() {
            const name = document.getElementById('player-name').value.trim();
            if (!name) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Nama Diperlukan!',
                    text: 'Silakan masukkan nama terlebih dahulu untuk memulai permainan.',
                    confirmButtonColor: '#f59e0b'
                });
                return;
            }
            
            currentPlayer = name;
            document.getElementById('current-player').textContent = name;
            
            // Reset game state
            playerPosition = { x: 1, y: 1 };
            questionsCompleted = 0;
            lives = 3;
            score = 0;
            gameScores = { visual: 0, auditory: 0, kinesthetic: 0 };
            completedBoxes = [];
            currentQuestionIndex = 0;
            isGameRunning = true;
            
            // Reset monsters
            initMonsters();
            
            // Show game screen
            document.getElementById('main-menu').classList.add('hidden');
            document.getElementById('game-screen').classList.remove('hidden');
            
            generateMaze();
            updateGameInfo();
            startGameLoop();
        }

        function restartGame() {
            document.getElementById('game-over-modal').classList.add('hidden');
            startGame();
        }

        function startGameLoop() {
            if (gameInterval) clearInterval(gameInterval);
            gameInterval = setInterval(() => {
                if (isGameRunning) {
                    moveMonsters();
                    checkCollisions();
                    generateMaze();
                }
            }, 800);
        }

        function moveMonsters() {
            monsters.forEach(monster => {
                let newX = monster.x;
                let newY = monster.y;
                
                // Move based on direction
                switch(monster.direction) {
                    case 'up': newY--; break;
                    case 'down': newY++; break;
                    case 'left': newX--; break;
                    case 'right': newX++; break;
                }
                
                // Check if new position is valid
                if (newY >= 0 && newY < mazeLayout.length && 
                    newX >= 0 && newX < mazeLayout[0].length && 
                    mazeLayout[newY][newX] !== 1) {
                    monster.x = newX;
                    monster.y = newY;
                } else {
                    // Change direction if hit wall
                    const directions = ['up', 'down', 'left', 'right'];
                    monster.direction = directions[Math.floor(Math.random() * directions.length)];
                }
            });
        }

        function checkCollisions() {
            monsters.forEach(monster => {
                if (monster.x === playerPosition.x && monster.y === playerPosition.y) {
                    lives--;
                    score = Math.max(0, score - 50);
                    
                    // Add damage flash effect
                    const playerCell = document.getElementById(`cell-${playerPosition.x}-${playerPosition.y}`);
                    if (playerCell) {
                        playerCell.classList.add('damage-flash');
                        setTimeout(() => {
                            playerCell.classList.remove('damage-flash');
                        }, 500);
                    }
                    
                    updateGameInfo();
                    
                    if (lives <= 0) {
                        gameOver();
                    } else {
                        // Move player to safe position
                        playerPosition = { x: 1, y: 1 };
                    }
                }
            });
        }

        function gameOver() {
            isGameRunning = false;
            if (gameInterval) clearInterval(gameInterval);
            document.getElementById('game-over-modal').classList.remove('hidden');
        }

        function generateMaze() {
            const container = document.getElementById('maze-container');
            container.innerHTML = '';
            
            for (let y = 0; y < mazeLayout.length; y++) {
                const row = document.createElement('div');
                row.style.height = '16px';
                row.style.lineHeight = '0';
                row.style.fontSize = '0';
                
                for (let x = 0; x < mazeLayout[y].length; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'maze-cell';
                    cell.id = `cell-${x}-${y}`;
                    
                    if (mazeLayout[y][x] === 1) {
                        // Alternate between brick and grass walls
                        if ((x + y) % 3 === 0) {
                            cell.classList.add('grass-wall');
                            cell.innerHTML = 'üåø';
                        } else {
                            cell.classList.add('wall');
                            cell.innerHTML = 'üß±';
                        }
                    } else if (mazeLayout[y][x] === 2) {
                        cell.classList.add('path');
                        const isCompleted = completedBoxes.some(box => box.x === x && box.y === y);
                        if (isCompleted) {
                            cell.classList.add('completed-box');
                            cell.innerHTML = '‚≠ê';
                        } else {
                            cell.classList.add('question-box');
                            cell.innerHTML = 'üì¶';
                        }
                    } else {
                        cell.classList.add('path');
                    }
                    
                    // Add monsters
                    const monster = monsters.find(m => m.x === x && m.y === y);
                    if (monster) {
                        cell.classList.add('monster');
                        cell.innerHTML = 'ü¶à';
                    }
                    
                    // Add player
                    if (x === playerPosition.x && y === playerPosition.y) {
                        cell.classList.add('player');
                        cell.innerHTML = 'üê†';
                        cell.classList.add('mario-jump');
                    }
                    
                    row.appendChild(cell);
                }
                container.appendChild(row);
            }
        }

        function handleKeyPress(event) {
            if (!isGameRunning) return;
            
            switch(event.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    event.preventDefault();
                    movePlayer('up');
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    event.preventDefault();
                    movePlayer('down');
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    event.preventDefault();
                    movePlayer('left');
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    event.preventDefault();
                    movePlayer('right');
                    break;
            }
        }

        function movePlayer(direction) {
            if (!isGameRunning) return;
            
            let newX = playerPosition.x;
            let newY = playerPosition.y;
            
            switch(direction) {
                case 'up': newY--; break;
                case 'down': newY++; break;
                case 'left': newX--; break;
                case 'right': newX++; break;
            }
            
            // Check boundaries and walls
            if (newY >= 0 && newY < mazeLayout.length && 
                newX >= 0 && newX < mazeLayout[0].length && 
                mazeLayout[newY][newX] !== 1) {
                
                playerPosition.x = newX;
                playerPosition.y = newY;
                
                // Check if player reached a question box
                if (mazeLayout[newY][newX] === 2) {
                    const isCompleted = completedBoxes.some(box => box.x === newX && box.y === newY);
                    if (!isCompleted) {
                        showQuestion();
                    }
                }
                
                generateMaze();
            }
        }

        function showQuestion() {
            if (currentQuestionIndex >= questions.length) return;
            
            isGameRunning = false; // Pause game during question
            
            const question = questions[currentQuestionIndex];
            document.getElementById('question-content').innerHTML = `
                <h4 class="font-bold text-lg mb-4">${question.text}</h4>
            `;
            
            const optionsContainer = document.getElementById('question-options');
            optionsContainer.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const button = document.createElement('button');
                button.className = 'w-full bg-blue-100 hover:bg-blue-200 p-3 rounded-lg text-left transition-all duration-200 border-2 border-transparent hover:border-blue-400';
                button.innerHTML = option.text;
                button.onclick = () => selectAnswer(option.type);
                optionsContainer.appendChild(button);
            });
            
            document.getElementById('question-modal').classList.remove('hidden');
        }

        function closeQuestion() {
            document.getElementById('question-modal').classList.add('hidden');
            isGameRunning = true; // Resume game
        }

        function selectAnswer(type) {
            gameScores[type]++;
            questionsCompleted++;
            currentQuestionIndex++;
            score += 100;
            
            // Mark current position as completed
            completedBoxes.push({ x: playerPosition.x, y: playerPosition.y });
            
            document.getElementById('question-modal').classList.add('hidden');
            isGameRunning = true; // Resume game
            updateGameInfo();
            generateMaze();
            
            // Check if all questions completed
            if (questionsCompleted >= questions.length) {
                setTimeout(() => {
                    completeGame();
                }, 500);
            }
        }

        function updateGameInfo() {
            document.getElementById('questions-completed').textContent = questionsCompleted;
            document.getElementById('lives').textContent = lives;
            document.getElementById('score').textContent = score;
        }

        // Store current game results globally
        let currentGameResult = null;

        async function completeGame() {
            isGameRunning = false;
            if (gameInterval) clearInterval(gameInterval);
            
            // Calculate percentages
            const total = gameScores.visual + gameScores.auditory + gameScores.kinesthetic;
            const percentages = {
                visual: Math.round((gameScores.visual / total) * 100),
                auditory: Math.round((gameScores.auditory / total) * 100),
                kinesthetic: Math.round((gameScores.kinesthetic / total) * 100)
            };
            
            // Determine dominant style
            const maxScore = Math.max(gameScores.visual, gameScores.auditory, gameScores.kinesthetic);
            let dominantStyle = '';
            if (gameScores.visual === maxScore) dominantStyle = 'Visual';
            else if (gameScores.auditory === maxScore) dominantStyle = 'Auditori';
            else dominantStyle = 'Kinestetik';
            
            // Store result for later saving
            currentGameResult = {
                name: currentPlayer,
                percentages: percentages,
                dominantStyle: dominantStyle
            };
            
            // Show completion modal
            document.getElementById('final-result').innerHTML = `
                <h4 class="font-bold text-lg mb-2">Gaya Belajar Dominan: ${dominantStyle}</h4>
                <div class="text-sm space-y-1">
                    <div>üëÅÔ∏è Visual: ${percentages.visual}%</div>
                    <div>üëÇ Auditori: ${percentages.auditory}%</div>
                    <div>‚úã Kinestetik: ${percentages.kinesthetic}%</div>
                    <div class="mt-2 font-bold">Skor Akhir: ${score}</div>
                </div>
            `;
            
            document.getElementById('complete-modal').classList.remove('hidden');
        }

        async function saveCurrentResult() {
            if (!currentGameResult) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops!',
                    text: 'Tidak ada hasil untuk disimpan!',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            
            try {
                // Show loading state
                const saveButton = document.querySelector('button[onclick="saveCurrentResult()"]');
                const originalText = saveButton.innerHTML;
                saveButton.innerHTML = '‚è≥ Menyimpan...';
                saveButton.disabled = true;
                
                // Show loading alert
                Swal.fire({
                    title: 'Menyimpan Hasil...',
                    text: 'Mohon tunggu sebentar',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                await saveResult(currentGameResult.name, currentGameResult.percentages, currentGameResult.dominantStyle);
                
                // Reset button
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
                
                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Berhasil!',
                    text: 'Hasil pembelajaran berhasil disimpan!',
                    confirmButtonColor: '#10b981',
                    timer: 3000,
                    timerProgressBar: true
                });
                
            } catch (error) {
                console.error('Error saving result:', error);
                
                // Reset button
                const saveButton = document.querySelector('button[onclick="saveCurrentResult()"]');
                saveButton.innerHTML = 'üíæ Simpan Hasil';
                saveButton.disabled = false;
                
                // Show error message
                Swal.fire({
                    icon: 'error',
                    title: 'Gagal Menyimpan!',
                    text: 'Terjadi kesalahan saat menyimpan. Silakan coba lagi.',
                    confirmButtonColor: '#ef4444'
                });
            }
        }

        async function saveResult(name, percentages, dominantStyle) {
            try {
                const formData = new FormData();
                formData.append('action', 'save');
                formData.append('name', name);
                formData.append('visual', percentages.visual);
                formData.append('auditory', percentages.auditory);
                formData.append('kinesthetic', percentages.kinesthetic);
                formData.append('dominant', dominantStyle);
                formData.append('score', score);
                formData.append('date', new Date().toISOString().split('T')[0]);
                
                const response = await fetch(API_ENDPOINT, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.text();
                console.log('Data saved:', result);
            } catch (error) {
                console.error('Error saving data:', error);
                // Fallback: save to localStorage if API fails
                const localData = JSON.parse(localStorage.getItem('learningStyleResults') || '[]');
                localData.push({
                    name: name,
                    visual: percentages.visual,
                    auditory: percentages.auditory,
                    kinesthetic: percentages.kinesthetic,
                    dominant: dominantStyle,
                    score: score,
                    date: new Date().toISOString().split('T')[0]
                });
                localStorage.setItem('learningStyleResults', JSON.stringify(localData));
                console.log('Data saved to localStorage as fallback');
            }
        }

        async function showResults() {
            document.getElementById('main-menu').classList.add('hidden');
            document.getElementById('results-screen').classList.remove('hidden');
            
            await loadStudentList();
        }

        async function loadStudentList() {
            try {
                const response = await fetch(`${API_ENDPOINT}?action=getAll`, {
                    method: 'GET'
                });
                
                const data = await response.json();
                const selector = document.getElementById('student-selector');
                selector.innerHTML = '<option value="">-- Pilih Siswa --</option>';
                
                data.forEach(student => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify(student);
                    option.textContent = student.name;
                    selector.appendChild(option);
                });
            } catch (error) {
                console.error('Error loading student list from API:', error);
                // Fallback: load from localStorage
                const localData = JSON.parse(localStorage.getItem('learningStyleResults') || '[]');
                const selector = document.getElementById('student-selector');
                selector.innerHTML = '<option value="">-- Pilih Siswa --</option>';
                
                localData.forEach(student => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify(student);
                    option.textContent = student.name;
                    selector.appendChild(option);
                });
                
                if (localData.length === 0) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'Belum ada data tersimpan';
                    selector.appendChild(option);
                }
            }
        }

        function loadStudentResult() {
            const selector = document.getElementById('student-selector');
            if (!selector.value) {
                document.getElementById('student-results').classList.add('hidden');
                document.getElementById('result-actions').classList.add('hidden');
                return;
            }
            
            const student = JSON.parse(selector.value);
            
            // Display student info
            document.getElementById('selected-student-name').textContent = student.name;
            document.getElementById('test-date').textContent = student.date;
            
            // Update percentages and bars
            document.getElementById('visual-percent').textContent = student.visual + '%';
            document.getElementById('auditory-percent').textContent = student.auditory + '%';
            document.getElementById('kinesthetic-percent').textContent = student.kinesthetic + '%';
            
            setTimeout(() => {
                document.getElementById('visual-bar').style.width = student.visual + '%';
                document.getElementById('auditory-bar').style.width = student.auditory + '%';
                document.getElementById('kinesthetic-bar').style.width = student.kinesthetic + '%';
            }, 100);
            
            // Show dominant style
            const styleInfo = {
                'Visual': {
                    icon: 'üëÅÔ∏è',
                    color: 'text-blue-600',
                    description: 'Belajar terbaik melalui penglihatan, gambar, dan visualisasi.',
                    tips: ['Gunakan diagram dan mind map', 'Buat catatan berwarna-warni', 'Gunakan flashcard bergambar']
                },
                'Auditori': {
                    icon: 'üëÇ',
                    color: 'text-green-600',
                    description: 'Belajar terbaik melalui pendengaran dan diskusi.',
                    tips: ['Dengarkan rekaman pelajaran', 'Diskusi dengan teman', 'Baca dengan suara keras']
                },
                'Kinestetik': {
                    icon: '‚úã',
                    color: 'text-purple-600',
                    description: 'Belajar terbaik melalui gerakan dan praktik langsung.',
                    tips: ['Gunakan manipulatif dan alat peraga', 'Belajar sambil bergerak', 'Praktik langsung']
                }
            };
            
            const info = styleInfo[student.dominant];
            document.getElementById('dominant-style').innerHTML = `
                <div class="text-center">
                    <div class="text-4xl mb-2">${info.icon}</div>
                    <h5 class="font-bold text-xl ${info.color} mb-2">${student.dominant}</h5>
                    <p class="text-gray-700">${info.description}</p>
                </div>
            `;
            
            document.getElementById('recommendations').innerHTML = `
                <h5 class="font-semibold mb-3">Tips Pembelajaran:</h5>
                <ul class="space-y-2">
                    ${info.tips.map(tip => `<li class="flex items-start"><span class="text-yellow-500 mr-2">‚≠ê</span>${tip}</li>`).join('')}
                </ul>
            `;
            
            document.getElementById('student-results').classList.remove('hidden');
            document.getElementById('result-actions').classList.remove('hidden');
        }

        function printResult() {
            window.print();
        }

        function sendToWhatsApp() {
            const studentName = document.getElementById('selected-student-name').textContent;
            const visual = document.getElementById('visual-percent').textContent;
            const auditory = document.getElementById('auditory-percent').textContent;
            const kinesthetic = document.getElementById('kinesthetic-percent').textContent;
            
            // Get student data to determine dominant style
            const selector = document.getElementById('student-selector');
            const student = JSON.parse(selector.value);
            const dominantStyle = student.dominant;
            
            // Parenting recommendations based on dominant learning style
            const parentingTips = {
                'Visual': [
                    'üìö Sediakan buku bergambar dan majalah anak',
                    'üé® Ajak anak menggambar atau mewarnai saat belajar',
                    'üìã Buat jadwal belajar dengan warna-warni',
                    'üó∫Ô∏è Gunakan peta, diagram, dan poster edukatif',
                    'üíª Manfaatkan video pembelajaran yang menarik',
                    'üìù Buat catatan dengan highlighter berwarna',
                    'üß© Bermain puzzle dan permainan visual'
                ],
                'Auditori': [
                    'üéµ Putar musik lembut saat anak belajar',
                    'üìñ Bacakan cerita dengan suara ekspresif',
                    'üó£Ô∏è Ajak anak berdiskusi tentang pelajaran',
                    'üé§ Biarkan anak membaca dengan suara keras',
                    'üìª Dengarkan podcast atau audio edukatif',
                    'üé∂ Buat lagu untuk mengingat pelajaran',
                    'üëÇ Berikan instruksi secara lisan yang jelas'
                ],
                'Kinestetik': [
                    'üèÉ Biarkan anak bergerak saat belajar',
                    'üîß Sediakan alat peraga dan benda nyata',
                    'üé≠ Ajak anak bermain peran dalam belajar',
                    '‚úã Gunakan gerakan tangan saat menjelaskan',
                    'üèóÔ∏è Buat model atau prakarya bersama',
                    'üö∂ Belajar sambil berjalan-jalan',
                    '‚öΩ Gabungkan pembelajaran dengan aktivitas fisik'
                ]
            };
            
            const tips = parentingTips[dominantStyle] || [];
            const tipsText = tips.map(tip => `‚Ä¢ ${tip}`).join('\n');
            
            const message = `*üéÆ Laporan Gaya Belajar - Labirin Gaya Belajar*\n\n` +
                          `üë§ *Nama Siswa:* ${studentName}\n` +
                          `üìÖ *Tanggal:* ${document.getElementById('test-date').textContent}\n\n` +
                          `üìä *Hasil Diagnostik:*\n` +
                          `üëÅÔ∏è Visual: ${visual}\n` +
                          `üëÇ Auditori: ${auditory}\n` +
                          `‚úã Kinestetik: ${kinesthetic}\n\n` +
                          `üèÜ *Gaya Belajar Dominan: ${dominantStyle}*\n\n` +
                          `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *Rekomendasi Pendampingan Orang Tua:*\n` +
                          `${tipsText}\n\n` +
                          `üí° *Tips Umum:*\n` +
                          `‚Ä¢ Berikan pujian saat anak berhasil\n` +
                          `‚Ä¢ Ciptakan lingkungan belajar yang nyaman\n` +
                          `‚Ä¢ Sesuaikan waktu belajar dengan mood anak\n` +
                          `‚Ä¢ Bersabar dan konsisten dalam mendampingi\n\n` +
                          `‚ú® Selamat! Anak Anda memiliki potensi besar dengan gaya belajar ${dominantStyle}. Gunakan strategi di atas untuk memaksimalkan pembelajaran di rumah.`;
            
            const encodedMessage = encodeURIComponent(message);
            window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
        }

        function backToWelcome() {
            // Stop game if running
            isGameRunning = false;
            if (gameInterval) clearInterval(gameInterval);
            
            // Hide all screens and show main menu
            document.getElementById('game-screen').classList.add('hidden');
            document.getElementById('results-screen').classList.add('hidden');
            document.getElementById('complete-modal').classList.add('hidden');
            document.getElementById('game-over-modal').classList.add('hidden');
            document.getElementById('question-modal').classList.add('hidden');
            document.getElementById('main-menu').classList.remove('hidden');
        }

        // Initialize game when page loads
        window.addEventListener('load', initGame);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'972b5df1d4c2d572',t:'MTc1NTc5MjI3NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
